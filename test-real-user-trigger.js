import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_SERVICE_ROLE_KEY
);

async function testRealUserTrigger() {
  console.log('üß™ TEST TRIGGER AVEC UTILISATEUR R√âEL');
  console.log('====================================\n');

  // Donn√©es de l'utilisateur r√©el
  const realUserEmail = 'test234@yahoo.com';
  const realUserId = '0e2f0742-02f8-44e6-9ef3-775e78f71e2f';
  const realTenantId = 'f935127c-e1b5-46a8-955d-23212b3acd08';
  const realInvitationId = '3d91bd0e-5cfb-4305-b7c3-421c82413c22';
  const realToken = '05951983257eb280007355e5aa647a9f0b76abddbb98bcfa14fbe79a';

  try {
    // ============================================
    // √âTAPE 1: V√âRIFIER L'INVITATION EXISTANTE
    // ============================================
    console.log('üîç 1. V√©rification de l\'invitation existante...');
    
    const { data: invitation, error: invitationError } = await supabase
      .from('invitations')
      .select('*')
      .eq('id', realInvitationId)
      .single();

    if (invitationError) {
      console.log('   ‚ùå Erreur r√©cup√©ration invitation:', invitationError.message);
      return;
    }
    
    console.log('   ‚úÖ Invitation trouv√©e:');
    console.log(`      - ID: ${invitation.id}`);
    console.log(`      - Email: ${invitation.email}`);
    console.log(`      - Tenant ID: ${invitation.tenant_id}`);
    console.log(`      - Status: ${invitation.status}`);
    console.log(`      - Full Name: ${invitation.full_name}`);
    console.log(`      - Token: ${invitation.token}`);

    // ============================================
    // √âTAPE 2: V√âRIFIER L'UTILISATEUR AUTH
    // ============================================
    console.log('\nüë§ 2. V√©rification de l\'utilisateur auth...');
    
    const { data: authUser, error: authError } = await supabase.auth.admin.getUserById(realUserId);

    if (authError) {
      console.log('   ‚ùå Erreur r√©cup√©ration utilisateur:', authError.message);
      return;
    }
    
    console.log('   ‚úÖ Utilisateur trouv√©:');
    console.log(`      - ID: ${authUser.user.id}`);
    console.log(`      - Email: ${authUser.user.email}`);
    console.log(`      - Email confirm√©: ${authUser.user.email_confirmed_at ? 'Oui' : 'Non'}`);
    console.log(`      - Cr√©√© le: ${authUser.user.created_at}`);

    // ============================================
    // √âTAPE 3: V√âRIFIER L'√âTAT ACTUEL
    // ============================================
    console.log('\nüîç 3. √âtat actuel des donn√©es...');
    
    const checkTable = async (table, condition, label) => {
      const { data, error } = await supabase.from(table).select('*').match(condition);
      if (error) {
        console.log(`   ‚ùå ${label}: Erreur - ${error.message}`);
        return null;
      }
      console.log(`   üìã ${label}: ${data?.length || 0} enregistrement(s)`);
      if (data && data.length > 0) {
        console.log(`      - Premier enregistrement:`, JSON.stringify(data[0], null, 2).substring(0, 200) + '...');
      }
      return data;
    };

    const existingTenant = await checkTable('tenants', { id: realTenantId }, 'Tenant');
    const existingProfile = await checkTable('profiles', { user_id: realUserId }, 'Profile');
    const existingUserRole = await checkTable('user_roles', { user_id: realUserId }, 'User Role');
    const existingEmployee = await checkTable('employees', { user_id: realUserId }, 'Employee');

    // ============================================
    // √âTAPE 4: SIMULER LE TRIGGER MANUELLEMENT
    // ============================================
    console.log('\nüöÄ 4. Simulation manuelle du trigger...');
    
    if (!authUser.user.email_confirmed_at) {
      console.log('   ‚ö†Ô∏è Email non confirm√©, simulation de la confirmation...');
      
      // Confirmer l'email pour d√©clencher le trigger
      const { data: confirmedUser, error: confirmError } = await supabase.auth.admin.updateUserById(
        realUserId,
        { email_confirm: true }
      );

      if (confirmError) {
        console.log('   ‚ùå Erreur confirmation email:', confirmError.message);
        return;
      }
      
      console.log('   ‚úÖ Email confirm√©, trigger d√©clench√©');
      
      // Attendre que le trigger s'ex√©cute
      console.log('   ‚è≥ Attente 3 secondes pour l\'ex√©cution du trigger...');
      await new Promise(resolve => setTimeout(resolve, 3000));
    } else {
      console.log('   ‚ÑπÔ∏è Email d√©j√† confirm√©, trigger d√©j√† ex√©cut√© ou en cours');
    }

    // ============================================
    // √âTAPE 5: V√âRIFIER LES R√âSULTATS
    // ============================================
    console.log('\nüìä 5. V√©rification des r√©sultats apr√®s trigger...');
    
    const checkAfterTrigger = async (table, condition, label, expectedFields = []) => {
      const { data, error } = await supabase.from(table).select('*').match(condition);
      
      if (error) {
        console.log(`   ‚ùå ${label}: Erreur - ${error.message}`);
        return false;
      }
      
      if (!data || data.length === 0) {
        console.log(`   ‚ùå ${label}: Aucun enregistrement trouv√©`);
        return false;
      }
      
      console.log(`   ‚úÖ ${label}: ${data.length} enregistrement(s) trouv√©(s)`);
      
      if (expectedFields.length > 0 && data[0]) {
        expectedFields.forEach(field => {
          const value = data[0][field];
          console.log(`      - ${field}: ${value}`);
        });
      }
      
      return true;
    };

    const tenantCreated = await checkAfterTrigger(
      'tenants', 
      { id: realTenantId }, 
      'Tenant cr√©√©',
      ['name', 'status', 'created_at']
    );

    const profileCreated = await checkAfterTrigger(
      'profiles', 
      { user_id: realUserId }, 
      'Profile cr√©√©',
      ['tenant_id', 'full_name', 'email', 'role']
    );

    const userRoleCreated = await checkAfterTrigger(
      'user_roles', 
      { user_id: realUserId }, 
      'User Role cr√©√©',
      ['role_id', 'tenant_id', 'is_active']
    );

    const employeeCreated = await checkAfterTrigger(
      'employees', 
      { user_id: realUserId }, 
      'Employee cr√©√©',
      ['employee_id', 'tenant_id', 'job_title', 'status']
    );

    // V√©rifier l'invitation mise √† jour
    const { data: updatedInvitation, error: invitationUpdateError } = await supabase
      .from('invitations')
      .select('*')
      .eq('id', realInvitationId)
      .single();

    if (!invitationUpdateError && updatedInvitation) {
      if (updatedInvitation.status === 'accepted') {
        console.log('   ‚úÖ Invitation: Status mis √† jour vers "accepted"');
        console.log(`      - accepted_at: ${updatedInvitation.accepted_at}`);
        console.log(`      - metadata: ${JSON.stringify(updatedInvitation.metadata, null, 2)}`);
      } else {
        console.log(`   ‚ö†Ô∏è Invitation: Status toujours "${updatedInvitation.status}"`);
      }
    }

    // ============================================
    // √âTAPE 6: R√âSUM√â ET DIAGNOSTIC
    // ============================================
    console.log('\nüìà 6. R√âSUM√â ET DIAGNOSTIC');
    console.log('‚îÄ'.repeat(40));
    
    const allCreated = tenantCreated && profileCreated && userRoleCreated && employeeCreated;
    
    if (allCreated) {
      console.log('üéâ SUCC√àS COMPLET: Le trigger a fonctionn√© parfaitement !');
      console.log('\n‚úÖ √âl√©ments cr√©√©s avec succ√®s:');
      console.log('   1. ‚úÖ Tenant avec l\'ID de l\'invitation');
      console.log('   2. ‚úÖ Profile utilisateur avec tenant_id');
      console.log('   3. ‚úÖ R√¥le tenant_admin assign√©');
      console.log('   4. ‚úÖ Employ√© avec employee_id unique');
      console.log('   5. ‚úÖ Invitation marqu√©e comme accept√©e');
      
      console.log('\nüîó Liens de donn√©es v√©rifi√©s:');
      console.log(`   - User ID: ${realUserId}`);
      console.log(`   - Tenant ID: ${realTenantId}`);
      console.log(`   - Email: ${realUserEmail}`);
      
    } else {
      console.log('‚ùå √âCHEC PARTIEL: Le trigger n\'a pas cr√©√© tous les √©l√©ments');
      console.log('\nüìã √âtat des cr√©ations:');
      console.log(`   - Tenant: ${tenantCreated ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Profile: ${profileCreated ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - User Role: ${userRoleCreated ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Employee: ${employeeCreated ? '‚úÖ' : '‚ùå'}`);
      
      console.log('\nüîß Actions recommand√©es:');
      if (!tenantCreated) console.log('   - V√©rifier les politiques RLS sur la table tenants');
      if (!profileCreated) console.log('   - V√©rifier les politiques RLS sur la table profiles');
      if (!userRoleCreated) console.log('   - V√©rifier l\'existence du r√¥le tenant_admin');
      if (!employeeCreated) console.log('   - V√©rifier les politiques RLS sur la table employees');
    }

    // ============================================
    // √âTAPE 7: TEST DE CONNEXION
    // ============================================
    console.log('\nüîê 7. Test de connexion utilisateur...');
    
    try {
      const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
        email: realUserEmail,
        password: 'hxwesr2m1C3M1!'
      });

      if (loginError) {
        console.log('   ‚ùå Erreur connexion:', loginError.message);
      } else {
        console.log('   ‚úÖ Connexion r√©ussie');
        console.log(`      - Session cr√©√©e pour: ${loginData.user.email}`);
        
        // D√©connexion
        await supabase.auth.signOut();
        console.log('   ‚úÖ D√©connexion effectu√©e');
      }
    } catch (error) {
      console.log('   ‚ùå Exception lors de la connexion:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale du test:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Ex√©cuter le test
console.log('üöÄ D√âMARRAGE DU TEST AVEC UTILISATEUR R√âEL\n');
testRealUserTrigger().then(() => {
  console.log('\n‚úÖ TEST TERMIN√â');
});
