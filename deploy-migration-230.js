import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes!');
  console.error('V√©rifiez SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY dans .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function deployMigration230() {
  console.log('');
  console.log('‚ïê'.repeat(80));
  console.log('üöÄ D√âPLOIEMENT MIGRATION 230');
  console.log('‚ïê'.repeat(80));
  console.log('');

  try {
    // Lire le fichier de migration
    const migrationPath = join(__dirname, 'supabase', 'migrations', '20250111000230_fix_user_roles_duplicates_and_trigger.sql');
    const migrationSQL = readFileSync(migrationPath, 'utf8');

    console.log('üìÑ Fichier de migration charg√©');
    console.log(`   Taille: ${(migrationSQL.length / 1024).toFixed(2)} KB`);
    console.log('');

    // Statistiques AVANT
    console.log('üìä STATISTIQUES AVANT MIGRATION:');
    const { count: beforeCount } = await supabase
      .from('user_roles')
      .select('*', { count: 'exact', head: true });
    
    const { data: beforeUsers } = await supabase
      .from('user_roles')
      .select('user_id');
    
    const uniqueUsersBefore = [...new Set(beforeUsers?.map(u => u.user_id) || [])].length;
    
    console.log(`   Total lignes: ${beforeCount}`);
    console.log(`   Utilisateurs uniques: ${uniqueUsersBefore}`);
    console.log(`   Moyenne: ${(beforeCount / uniqueUsersBefore).toFixed(2)} r√¥les/utilisateur`);
    console.log('');

    // Ex√©cuter la migration
    console.log('‚öôÔ∏è  EX√âCUTION DE LA MIGRATION...');
    console.log('');

    const { data, error } = await supabase.rpc('exec_sql', {
      sql_query: migrationSQL
    });

    if (error) {
      // Si la fonction exec_sql n'existe pas, essayer directement
      console.log('   ‚ÑπÔ∏è  Tentative d\'ex√©cution directe...');
      
      const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${supabaseKey}`,
          'apikey': supabaseKey
        },
        body: JSON.stringify({ query: migrationSQL })
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
      }
    }

    console.log('‚úÖ Migration ex√©cut√©e avec succ√®s!');
    console.log('');

    // Statistiques APR√àS
    console.log('üìä STATISTIQUES APR√àS MIGRATION:');
    const { count: afterCount } = await supabase
      .from('user_roles')
      .select('*', { count: 'exact', head: true });
    
    const { data: afterUsers } = await supabase
      .from('user_roles')
      .select('user_id');
    
    const uniqueUsersAfter = [...new Set(afterUsers?.map(u => u.user_id) || [])].length;
    
    console.log(`   Total lignes: ${afterCount}`);
    console.log(`   Utilisateurs uniques: ${uniqueUsersAfter}`);
    console.log(`   Moyenne: ${(afterCount / uniqueUsersAfter).toFixed(2)} r√¥les/utilisateur`);
    console.log('');

    // R√©sum√©
    const deletedRows = beforeCount - afterCount;
    const reductionPercent = ((deletedRows / beforeCount) * 100).toFixed(2);

    console.log('üìà R√âSUM√â:');
    console.log(`   Lignes supprim√©es: ${deletedRows}`);
    console.log(`   R√©duction: ${reductionPercent}%`);
    console.log('');

    // V√©rification des doublons
    console.log('üîç V√âRIFICATION DES DOUBLONS:');
    const { data: duplicates } = await supabase.rpc('check_user_roles_duplicates');
    
    if (!duplicates || duplicates.length === 0) {
      console.log('   ‚úÖ Aucun doublon d√©tect√©');
    } else {
      console.log(`   ‚ö†Ô∏è  ${duplicates.length} doublons restants`);
    }
    console.log('');

    console.log('‚ïê'.repeat(80));
    console.log('‚úÖ MIGRATION 230 D√âPLOY√âE AVEC SUCC√àS');
    console.log('‚ïê'.repeat(80));
    console.log('');
    console.log('‚ö†Ô∏è  ACTIONS REQUISES:');
    console.log('   1. Vider le cache frontend (localStorage)');
    console.log('   2. Recharger l\'application (Ctrl+Shift+R)');
    console.log('   3. Demander aux utilisateurs de se reconnecter');
    console.log('');

  } catch (error) {
    console.error('');
    console.error('‚ïê'.repeat(80));
    console.error('‚ùå ERREUR LORS DU D√âPLOIEMENT');
    console.error('‚ïê'.repeat(80));
    console.error('');
    console.error('Message:', error.message);
    console.error('Stack:', error.stack);
    console.error('');
    console.error('üí° SOLUTION:');
    console.error('   Ex√©cutez manuellement le fichier SQL dans le Dashboard Supabase:');
    console.error('   supabase/migrations/20250111000230_fix_user_roles_duplicates_and_trigger.sql');
    console.error('');
    process.exit(1);
  }
}

deployMigration230();
