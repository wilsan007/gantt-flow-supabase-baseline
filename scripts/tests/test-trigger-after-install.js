#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://qliinxtanjdnwxlvnxji.supabase.co';
const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaWlueHRhbmpkbnd4bHZueGppIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzE2ODYxMywiZXhwIjoyMDcyNzQ0NjEzfQ.THSC4CaaEh0IJPP-zPRXGFIbltg79wpOGoEG4diLZAI';
const supabase = createClient(supabaseUrl, serviceKey);

const TEST_EMAIL = 'test0071@yahoo.com';

async function testTriggerAfterInstall() {
  console.log('üß™ TEST TRIGGER APR√àS INSTALLATION');
  console.log('=' .repeat(50));

  try {
    // 1. V√©rifier l'utilisateur de test
    console.log('\nüë§ 1. V√âRIFICATION UTILISATEUR...');
    const { data: users } = await supabase.auth.admin.listUsers();
    const testUser = users.users.find(u => u.email === TEST_EMAIL);
    
    if (!testUser) {
      console.log('‚ùå Utilisateur test non trouv√©');
      return false;
    }

    console.log(`‚úÖ Utilisateur: ${testUser.id}`);
    console.log(`üìß Email confirm√©: ${testUser.email_confirmed_at ? 'OUI' : 'NON'}`);

    // 2. Nettoyer les donn√©es existantes pour un test propre
    console.log('\nüßπ 2. NETTOYAGE DONN√âES EXISTANTES...');
    
    await supabase.from('employees').delete().eq('user_id', testUser.id);
    await supabase.from('user_roles').delete().eq('user_id', testUser.id);
    await supabase.from('profiles').delete().eq('user_id', testUser.id);
    
    // Remettre l'invitation en pending
    await supabase
      .from('invitations')
      .update({ 
        status: 'pending', 
        accepted_at: null,
        metadata: null 
      })
      .eq('email', TEST_EMAIL);

    console.log('‚úÖ Donn√©es nettoy√©es');

    // 3. D√©clencher la confirmation d'email pour tester le trigger
    console.log('\nüî• 3. D√âCLENCHEMENT TRIGGER...');
    
    // D'abord remettre l'email comme non confirm√©
    const { error: resetError } = await supabase.auth.admin.updateUserById(
      testUser.id,
      { email_confirm: false }
    );

    if (resetError) {
      console.log('‚ö†Ô∏è Impossible de reset email_confirmed_at:', resetError.message);
    } else {
      console.log('üìß Email remis en non-confirm√©');
    }

    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Maintenant confirmer l'email pour d√©clencher le trigger
    console.log('üî• Confirmation email pour d√©clencher le trigger...');
    
    const { error: confirmError } = await supabase.auth.admin.updateUserById(
      testUser.id,
      { email_confirm: true }
    );

    if (confirmError) {
      console.log('‚ùå Erreur confirmation:', confirmError.message);
      return false;
    }

    console.log('‚úÖ Email confirm√©, trigger d√©clench√©');

    // 4. Attendre et v√©rifier les r√©sultats
    console.log('\n‚è≥ 4. ATTENTE TRAITEMENT (10 secondes)...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // 5. V√©rifier si l'Edge Function s'est d√©clench√©e
    console.log('\nüìä 5. V√âRIFICATION R√âSULTATS...');
    
    const { data: profile } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', testUser.id)
      .single();

    const { data: employee } = await supabase
      .from('employees')
      .select('*')
      .eq('user_id', testUser.id)
      .single();

    const { data: roles } = await supabase
      .from('user_roles')
      .select('*, roles(name)')
      .eq('user_id', testUser.id);

    const { data: invitation } = await supabase
      .from('invitations')
      .select('*')
      .eq('email', TEST_EMAIL)
      .single();

    // 6. Afficher les r√©sultats
    console.log('\nüìã R√âSULTATS DU TEST:');
    console.log('‚îÄ'.repeat(40));
    
    const profileCreated = !!profile;
    const employeeCreated = !!employee;
    const rolesAssigned = roles && roles.length > 0;
    const invitationAccepted = invitation?.status === 'accepted';

    console.log(`üë§ Profil cr√©√©: ${profileCreated ? '‚úÖ OUI' : '‚ùå NON'}`);
    console.log(`üë®‚Äçüíº Employ√© cr√©√©: ${employeeCreated ? '‚úÖ OUI (' + employee.employee_id + ')' : '‚ùå NON'}`);
    console.log(`üîê R√¥les assign√©s: ${rolesAssigned ? '‚úÖ OUI (' + roles.map(r => r.roles.name).join(', ') + ')' : '‚ùå NON'}`);
    console.log(`üìß Invitation accept√©e: ${invitationAccepted ? '‚úÖ OUI' : '‚ùå NON'}`);

    const score = [profileCreated, employeeCreated, rolesAssigned, invitationAccepted].filter(Boolean).length;
    
    console.log(`\nüéØ Score: ${score}/4`);

    if (score === 4) {
      console.log('üéâ SUCC√àS COMPLET ! Le trigger fonctionne parfaitement');
      console.log('‚úÖ L\'Edge Function est d√©clench√©e automatiquement');
      console.log('üöÄ Syst√®me pr√™t pour la production');
      return true;
    } else if (score > 0) {
      console.log('‚ö†Ô∏è SUCC√àS PARTIEL - Le trigger fonctionne mais incomplet');
      console.log('üîß V√©rifiez les logs de l\'Edge Function');
      return false;
    } else {
      console.log('‚ùå √âCHEC - Le trigger ne fonctionne pas');
      console.log('üîß V√©rifiez que le SQL a √©t√© ex√©cut√© correctement');
      console.log('üìã V√©rifiez les logs dans Supabase Dashboard');
      return false;
    }

  } catch (error) {
    console.error('üí• Erreur:', error);
    return false;
  }
}

testTriggerAfterInstall()
  .then(success => {
    if (success) {
      console.log('\nüèÜ VALIDATION FINALE R√âUSSIE !');
      console.log('Le syst√®me Edge Function est op√©rationnel');
    } else {
      console.log('\n‚ö†Ô∏è PROBL√àME D√âTECT√â');
      console.log('Consultez les instructions ci-dessus');
    }
    process.exit(success ? 0 : 1);
  });
