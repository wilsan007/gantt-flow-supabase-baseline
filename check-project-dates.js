/**
 * Script de v√©rification des dates de projets et t√¢ches
 * V√©rifie la coh√©rence entre les dates des projets et leurs t√¢ches
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger les variables d'environnement
dotenv.config({ path: join(__dirname, '.env.local') });
dotenv.config({ path: join(__dirname, '.env') });

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

// Utiliser la cl√© SERVICE_ROLE pour acc√©der aux donn√©es
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkProjectDates() {
  console.log('üîç V√©rification des dates de projets et t√¢ches...\n');

  try {
    // 1. R√©cup√©rer tous les projets
    const { data: projects, error: projectsError } = await supabase
      .from('projects')
      .select('id, name, start_date, end_date, status')
      .order('created_at', { ascending: false });

    if (projectsError) throw projectsError;

    console.log(`üìä ${projects.length} projets trouv√©s\n`);

    // 2. Pour chaque projet, r√©cup√©rer ses t√¢ches
    for (const project of projects) {
      console.log('‚îÅ'.repeat(80));
      console.log(`\nüìÅ Projet: ${project.name}`);
      console.log(`   ID: ${project.id}`);
      console.log(`   Statut: ${project.status}`);
      console.log(`   Dates du projet:`);
      console.log(`     ‚Ä¢ D√©but: ${project.start_date || '‚ùå Non d√©fini'}`);
      console.log(`     ‚Ä¢ Fin:   ${project.end_date || '‚ùå Non d√©fini'}`);

      // R√©cup√©rer les t√¢ches du projet
      const { data: tasks, error: tasksError } = await supabase
        .from('tasks')
        .select('id, title, start_date, due_date, status, parent_id')
        .eq('project_id', project.id)
        .order('start_date', { ascending: true });

      if (tasksError) {
        console.log(`   ‚ö†Ô∏è Erreur lors de la r√©cup√©ration des t√¢ches: ${tasksError.message}`);
        continue;
      }

      if (tasks.length === 0) {
        console.log(`   ‚ö†Ô∏è Aucune t√¢che associ√©e √† ce projet`);
        continue;
      }

      console.log(`\n   üìù ${tasks.length} t√¢ches trouv√©es:`);

      // Calculer les dates min/max des t√¢ches
      const taskDates = tasks
        .filter(t => t.start_date && t.due_date)
        .map(t => ({
          start: new Date(t.start_date),
          end: new Date(t.due_date)
        }));

      if (taskDates.length === 0) {
        console.log(`   ‚ö†Ô∏è Aucune t√¢che avec des dates valides`);
        continue;
      }

      const minTaskDate = new Date(Math.min(...taskDates.map(d => d.start.getTime())));
      const maxTaskDate = new Date(Math.max(...taskDates.map(d => d.end.getTime())));

      console.log(`\n   üìÖ Plage des t√¢ches:`);
      console.log(`     ‚Ä¢ Date la plus t√¥t:  ${minTaskDate.toISOString().split('T')[0]}`);
      console.log(`     ‚Ä¢ Date la plus tard: ${maxTaskDate.toISOString().split('T')[0]}`);

      // Afficher chaque t√¢che
      console.log(`\n   üìã D√©tail des t√¢ches:`);
      tasks.forEach((task, index) => {
        const isSubtask = task.parent_id ? '  ‚îî‚îÄ ' : '  ‚Ä¢ ';
        console.log(`${isSubtask}${task.title}`);
        console.log(`     D√©but: ${task.start_date || '‚ùå'} | Fin: ${task.due_date || '‚ùå'} | Statut: ${task.status}`);
      });

      // V√©rifications de coh√©rence
      console.log(`\n   üîç V√©rifications:`);

      const projectStart = project.start_date ? new Date(project.start_date) : null;
      const projectEnd = project.end_date ? new Date(project.end_date) : null;

      let hasIssues = false;

      // V√©rification 1: Le projet a-t-il des dates d√©finies ?
      if (!projectStart || !projectEnd) {
        console.log(`   ‚ö†Ô∏è Le projet n'a pas de dates d√©finies`);
        hasIssues = true;
      } else {
        // V√©rification 2: La date de d√©but du projet est-elle avant ou √©gale √† la premi√®re t√¢che ?
        if (projectStart > minTaskDate) {
          const diff = Math.ceil((projectStart - minTaskDate) / (1000 * 60 * 60 * 24));
          console.log(`   ‚ùå La date de d√©but du projet (${project.start_date}) est APR√àS la premi√®re t√¢che (${minTaskDate.toISOString().split('T')[0]}) - √âcart: ${diff} jours`);
          hasIssues = true;
        } else {
          console.log(`   ‚úÖ La date de d√©but du projet englobe les t√¢ches`);
        }

        // V√©rification 3: La date de fin du projet est-elle apr√®s ou √©gale √† la derni√®re t√¢che ?
        if (projectEnd < maxTaskDate) {
          const diff = Math.ceil((maxTaskDate - projectEnd) / (1000 * 60 * 60 * 24));
          console.log(`   ‚ùå La date de fin du projet (${project.end_date}) est AVANT la derni√®re t√¢che (${maxTaskDate.toISOString().split('T')[0]}) - √âcart: ${diff} jours`);
          hasIssues = true;
        } else {
          console.log(`   ‚úÖ La date de fin du projet englobe les t√¢ches`);
        }

        // V√©rification 4: Dur√©e du projet vs dur√©e des t√¢ches
        const projectDuration = Math.ceil((projectEnd - projectStart) / (1000 * 60 * 60 * 24));
        const tasksDuration = Math.ceil((maxTaskDate - minTaskDate) / (1000 * 60 * 60 * 24));
        console.log(`   üìä Dur√©e du projet: ${projectDuration} jours | Dur√©e des t√¢ches: ${tasksDuration} jours`);
      }

      // V√©rification 5: T√¢ches avec dates incoh√©rentes
      const invalidTasks = tasks.filter(t => {
        if (!t.start_date || !t.due_date) return false;
        return new Date(t.start_date) > new Date(t.due_date);
      });

      if (invalidTasks.length > 0) {
        console.log(`   ‚ùå ${invalidTasks.length} t√¢che(s) avec date de d√©but apr√®s date de fin:`);
        invalidTasks.forEach(t => {
          console.log(`      ‚Ä¢ ${t.title}: ${t.start_date} > ${t.due_date}`);
        });
        hasIssues = true;
      }

      if (!hasIssues && projectStart && projectEnd) {
        console.log(`   ‚úÖ Toutes les v√©rifications sont OK`);
      }

      console.log('');
    }

    console.log('‚îÅ'.repeat(80));
    console.log('\n‚úÖ V√©rification termin√©e\n');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter la v√©rification
checkProjectDates();
