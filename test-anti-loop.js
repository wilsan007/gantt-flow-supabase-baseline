/**
 * üß™ TEST PROTECTION ANTI-BOUCLE
 * 
 * Simuler plusieurs webhooks simultan√©s pour v√©rifier 
 * que la protection anti-boucle fonctionne correctement
 */

import { config } from 'dotenv';

config();

async function testAntiLoop() {
  console.log('üß™ ===== TEST PROTECTION ANTI-BOUCLE =====');
  console.log('üéØ Simuler plusieurs webhooks simultan√©s');
  console.log('');

  const webhookUrl = 'https://qliinxtanjdnwxlvnxji.supabase.co/functions/v1/handle-email-confirmation';
  const serviceRoleKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

  // Donn√©es de test avec utilisateur d√©j√† trait√©
  const testUserData = {
    id: 'f8d9a4a0-955f-4d6b-873d-7b276cea3716',
    email: 'tedsqty1@yahoo.com',
    email_confirmed_at: null,
    created_at: '2025-10-01T10:51:46.565425+00:00',
    raw_user_meta_data: {
      locale: 'fr-FR',
      full_name: 'Med terffsd',
      temp_user: true,
      tenant_id: '9f61d122-3bdc-4efc-9c4c-1d17bbecef2b',
      company_name: 'Med Company',
      expected_role: 'tenant_admin',
      invitation_id: '7d54c6cf-80dc-4a2d-a902-060a7ef5d85d',
      temp_password: '565w7j5mE2LX1!',
      security_level: 'standard',
      invitation_type: 'tenant_owner',
      invited_by_type: 'super_admin',
      validation_code: '49a6mfnj3xz',
      created_timestamp: '2025-10-01T10:51:46.409Z',
      invitation_source: 'admin_panel',
      // IMPORTANT: Marquer comme d√©j√† trait√©
      process_completed: true,
      completed_at: '2025-10-01T10:52:00.000Z'
    }
  };

  const webhookPayload = {
    type: 'UPDATE',
    table: 'users',
    record: testUserData,
    schema: 'auth',
    old_record: null
  };

  try {
    console.log('üîç √âTAPE 1: Test utilisateur d√©j√† trait√©...');
    
    const response1 = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${serviceRoleKey}`,
        'apikey': serviceRoleKey
      },
      body: JSON.stringify(webhookPayload)
    });

    console.log('üìä R√©ponse 1:');
    console.log('   - Status:', response1.status);
    
    if (response1.ok) {
      const data1 = await response1.json();
      console.log('   - Message:', data1.message);
      
      if (data1.message?.includes('d√©j√† trait√©')) {
        console.log('‚úÖ Protection anti-boucle fonctionne - utilisateur d√©j√† trait√© d√©tect√©');
      }
    }

    console.log('');
    console.log('üîç √âTAPE 2: Test webhooks multiples simultan√©s...');
    
    // Simuler 5 webhooks simultan√©s
    const promises = [];
    for (let i = 0; i < 5; i++) {
      promises.push(
        fetch(webhookUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${serviceRoleKey}`,
            'apikey': serviceRoleKey
          },
          body: JSON.stringify(webhookPayload)
        })
      );
    }

    const startTime = Date.now();
    const responses = await Promise.all(promises);
    const endTime = Date.now();

    console.log('üìä R√©sultats webhooks simultan√©s:');
    console.log('   - Nombre de requ√™tes:', responses.length);
    console.log('   - Dur√©e totale:', endTime - startTime, 'ms');
    
    let successCount = 0;
    let ignoredCount = 0;
    let errorCount = 0;

    for (let i = 0; i < responses.length; i++) {
      const response = responses[i];
      console.log(`   - Webhook ${i + 1}: Status ${response.status}`);
      
      if (response.ok) {
        const data = await response.json();
        if (data.message?.includes('d√©j√† trait√©')) {
          ignoredCount++;
        } else if (data.success) {
          successCount++;
        }
      } else {
        errorCount++;
      }
    }

    console.log('');
    console.log('üìä ANALYSE DES R√âSULTATS:');
    console.log('   - Succ√®s (nouveaux):', successCount);
    console.log('   - Ignor√©s (d√©j√† trait√©s):', ignoredCount);
    console.log('   - Erreurs:', errorCount);
    
    console.log('');
    console.log('üéØ ===== CONCLUSION =====');
    
    if (ignoredCount >= 4 && successCount <= 1) {
      console.log('üéâ PROTECTION ANTI-BOUCLE EFFICACE !');
      console.log('‚úÖ La majorit√© des webhooks ont √©t√© correctement ignor√©s');
      console.log('‚úÖ Pas de traitement en double d√©tect√©');
      console.log('‚úÖ Performance acceptable');
      console.log('');
      console.log('üí° Recommandations:');
      console.log('   - La protection fonctionne correctement');
      console.log('   - D√©ployer en production');
      console.log('   - Monitorer les logs pour confirmer');
      
    } else if (successCount === 0 && ignoredCount === 5) {
      console.log('‚úÖ PROTECTION TOTALE ACTIVE');
      console.log('üîí Tous les webhooks ont √©t√© ignor√©s (utilisateur d√©j√† trait√©)');
      console.log('üí° C\'est le comportement attendu pour un utilisateur d√©j√† trait√©');
      
    } else {
      console.log('‚ö†Ô∏è PROTECTION PARTIELLE');
      console.log('üí° Points √† v√©rifier:');
      console.log('   - Trop de succ√®s simultan√©s d√©tect√©s');
      console.log('   - V√©rifier la logique de d√©tection');
      console.log('   - Renforcer les protections si n√©cessaire');
    }

    console.log('');
    console.log('üîß M√âTRIQUES TECHNIQUES:');
    console.log('   - Temps de r√©ponse moyen:', Math.round((endTime - startTime) / responses.length), 'ms');
    console.log('   - Efficacit√© protection:', Math.round((ignoredCount / responses.length) * 100), '%');
    console.log('   - Taux d\'erreur:', Math.round((errorCount / responses.length) * 100), '%');

  } catch (error) {
    console.error('üö® ERREUR DURANT LE TEST:', error);
  }
}

testAntiLoop().then(() => {
  console.log('');
  console.log('üèÅ Test protection anti-boucle termin√©');
  process.exit(0);
}).catch(error => {
  console.error('üí• Erreur fatale:', error);
  process.exit(1);
});
