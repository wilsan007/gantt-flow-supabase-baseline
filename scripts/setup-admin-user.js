// Script pour configurer l'utilisateur comme admin tenant
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://qliinxtanjdnwxlvnxji.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaWlueHRhbmpkbnd4bHZueGppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNjg2MTMsImV4cCI6MjA3Mjc0NDYxM30.13wLfMNJ2Joxpw9GWq2_ymJgPtQizZZUzRUDNVRhQzM";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

const USER_ID = "ebb4c3fe-6288-41df-972d-4a6f32ed813d";
const USER_EMAIL = "zdouce.zz@gmail.com";
const TENANT_ID = "878c5ac9-4e99-4baf-803a-14f8ac964ec4";

async function setupAdminUser() {
  try {
    console.log('üîß Configuration de l\'utilisateur admin...');
    console.log('üë§ User ID:', USER_ID);
    console.log('üè¢ Tenant ID:', TENANT_ID);
    
    // √âtape 1: Se connecter avec l'utilisateur
    console.log('\n1Ô∏è‚É£ Connexion de l\'utilisateur...');
    // Note: Nous allons utiliser les API publiques sans authentification pour la configuration initiale
    console.log('‚ÑπÔ∏è Configuration via API publique (pas besoin de mot de passe)');
    
    // √âtape 2: Cr√©er/Mettre √† jour le profil dans la table profiles
    console.log('\n2Ô∏è‚É£ Configuration du profil utilisateur...');
    
    const { data: existingProfile, error: profileCheckError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', USER_ID)
      .single();
    
    if (profileCheckError && profileCheckError.code !== 'PGRST116') {
      console.log('‚ùå Erreur v√©rification profil:', profileCheckError.message);
    }
    
    if (existingProfile) {
      console.log('‚úÖ Profil existant trouv√©, mise √† jour...');
      
      const { data: updatedProfile, error: updateError } = await supabase
        .from('profiles')
        .update({
          tenant_id: TENANT_ID,
          role: 'admin',
          job_title: 'Administrateur Syst√®me',
          full_name: 'Administrateur Wadashaqeen'
        })
        .eq('user_id', USER_ID)
        .select()
        .single();
      
      if (updateError) {
        console.log('‚ùå Erreur mise √† jour profil:', updateError.message);
      } else {
        console.log('‚úÖ Profil mis √† jour');
      }
    } else {
      console.log('üìù Cr√©ation d\'un nouveau profil...');
      
      const { data: newProfile, error: createProfileError } = await supabase
        .from('profiles')
        .insert([{
          user_id: USER_ID,
          tenant_id: TENANT_ID,
          full_name: 'Administrateur Wadashaqeen',
          role: 'admin',
          job_title: 'Administrateur Syst√®me',
          employee_id: 'ADM001',
          hire_date: new Date().toISOString().split('T')[0],
          contract_type: 'CDI',
          weekly_hours: 40
        }])
        .select()
        .single();
      
      if (createProfileError) {
        console.log('‚ùå Erreur cr√©ation profil:', createProfileError.message);
      } else {
        console.log('‚úÖ Nouveau profil cr√©√©');
      }
    }
    
    // √âtape 3: Cr√©er/Mettre √† jour l'entr√©e tenant_members
    console.log('\n3Ô∏è‚É£ Configuration des membres du tenant...');
    
    const { data: existingMember, error: memberCheckError } = await supabase
      .from('tenant_members')
      .select('*')
      .eq('user_id', USER_ID)
      .eq('tenant_id', TENANT_ID)
      .single();
    
    if (memberCheckError && memberCheckError.code !== 'PGRST116') {
      console.log('‚ùå Erreur v√©rification membre:', memberCheckError.message);
    }
    
    if (existingMember) {
      console.log('‚úÖ Membre existant trouv√©, mise √† jour...');
      
      const { data: updatedMember, error: updateMemberError } = await supabase
        .from('tenant_members')
        .update({
          role: 'admin',
          status: 'active',
          joined_at: new Date().toISOString(),
          permissions: {
            "admin": true,
            "manage_users": true,
            "manage_projects": true,
            "manage_tasks": true,
            "manage_hr": true,
            "view_analytics": true,
            "manage_settings": true
          }
        })
        .eq('user_id', USER_ID)
        .eq('tenant_id', TENANT_ID)
        .select()
        .single();
      
      if (updateMemberError) {
        console.log('‚ùå Erreur mise √† jour membre:', updateMemberError.message);
      } else {
        console.log('‚úÖ Membre mis √† jour avec permissions admin');
      }
    } else {
      console.log('üìù Ajout comme nouveau membre du tenant...');
      
      const { data: newMember, error: createMemberError } = await supabase
        .from('tenant_members')
        .insert([{
          user_id: USER_ID,
          tenant_id: TENANT_ID,
          role: 'admin',
          status: 'active',
          joined_at: new Date().toISOString(),
          permissions: {
            "admin": true,
            "manage_users": true,
            "manage_projects": true,
            "manage_tasks": true,
            "manage_hr": true,
            "view_analytics": true,
            "manage_settings": true
          }
        }])
        .select()
        .single();
      
      if (createMemberError) {
        console.log('‚ùå Erreur cr√©ation membre:', createMemberError.message);
      } else {
        console.log('‚úÖ Nouveau membre cr√©√© avec permissions admin');
      }
    }
    
    // √âtape 4: Cr√©er/Mettre √† jour l'entr√©e employees
    console.log('\n4Ô∏è‚É£ Configuration de l\'employ√©...');
    
    const { data: existingEmployee, error: employeeCheckError } = await supabase
      .from('employees')
      .select('*')
      .eq('user_id', USER_ID)
      .single();
    
    if (employeeCheckError && employeeCheckError.code !== 'PGRST116') {
      console.log('‚ùå Erreur v√©rification employ√©:', employeeCheckError.message);
    }
    
    if (existingEmployee) {
      console.log('‚úÖ Employ√© existant trouv√©, mise √† jour...');
      
      const { data: updatedEmployee, error: updateEmployeeError } = await supabase
        .from('employees')
        .update({
          tenant_id: TENANT_ID,
          status: 'active'
        })
        .eq('user_id', USER_ID)
        .select()
        .single();
      
      if (updateEmployeeError) {
        console.log('‚ùå Erreur mise √† jour employ√©:', updateEmployeeError.message);
      } else {
        console.log('‚úÖ Employ√© mis √† jour');
      }
    } else {
      console.log('üìù Cr√©ation d\'un nouvel employ√©...');
      
      const { data: newEmployee, error: createEmployeeError } = await supabase
        .from('employees')
        .insert([{
          user_id: USER_ID,
          tenant_id: TENANT_ID,
          email: USER_EMAIL,
          full_name: 'Administrateur Wadashaqeen',
          employee_id: 'ADM001',
          job_title: 'Administrateur Syst√®me',
          hire_date: new Date().toISOString().split('T')[0],
          contract_type: 'CDI',
          status: 'active',
          weekly_hours: 40
        }])
        .select()
        .single();
      
      if (createEmployeeError) {
        console.log('‚ùå Erreur cr√©ation employ√©:', createEmployeeError.message);
      } else {
        console.log('‚úÖ Nouvel employ√© cr√©√©');
      }
    }
    
    // √âtape 5: V√©rification finale
    console.log('\n5Ô∏è‚É£ V√©rification finale...');
    
    const { data: finalProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', USER_ID)
      .single();
    
    const { data: finalMember } = await supabase
      .from('tenant_members')
      .select('*')
      .eq('user_id', USER_ID)
      .eq('tenant_id', TENANT_ID)
      .single();
    
    const { data: finalEmployee } = await supabase
      .from('employees')
      .select('*')
      .eq('user_id', USER_ID)
      .single();
    
    console.log('\nüìä R√©sum√© de la configuration:');
    console.log('üë§ Profil:', finalProfile ? '‚úÖ Configur√©' : '‚ùå Manquant');
    console.log('üè¢ Membre tenant:', finalMember ? '‚úÖ Configur√©' : '‚ùå Manquant');
    console.log('üë• Employ√©:', finalEmployee ? '‚úÖ Configur√©' : '‚ùå Manquant');
    
    if (finalProfile && finalMember) {
      console.log('\nüéâ Configuration admin termin√©e avec succ√®s!');
      console.log('üîê L\'utilisateur peut maintenant acc√©der aux donn√©es du tenant');
    } else {
      console.log('\n‚ö†Ô∏è Configuration incompl√®te, v√©rifiez les erreurs ci-dessus');
    }
    
    return true;
    
  } catch (err) {
    console.error('üí• Erreur critique:', err.message);
    return false;
  }
}

setupAdminUser().then(success => {
  if (success) {
    console.log('\n‚úÖ Script termin√©');
  } else {
    console.log('\n‚ùå Script √©chou√©');
  }
  process.exit(success ? 0 : 1);
});
