const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function analyzeTenantMembersDependencies() {
  console.log('üîç Analyse des d√©pendances de la table tenant_members...\n');

  try {
    // 1. V√©rifier si la table tenant_members existe
    console.log('1. V√©rification de l\'existence de la table tenant_members:');
    const { data: tableExists, error: tableError } = await supabase
      .from('tenant_members')
      .select('*', { count: 'exact', head: true });

    if (tableError) {
      if (tableError.code === 'PGRST116' || tableError.message.includes('does not exist')) {
        console.log('‚úÖ La table tenant_members n\'existe plus - d√©j√† supprim√©e');
        return;
      }
      console.log('‚ùå Erreur lors de la v√©rification de la table:', tableError.message);
      return;
    }

    console.log(`üìä Table tenant_members existe avec ${tableExists?.length || 0} enregistrements`);

    // 2. V√©rifier les contraintes de cl√©s √©trang√®res qui r√©f√©rencent tenant_members
    console.log('\n2. V√©rification des contraintes FK qui r√©f√©rencent tenant_members:');
    try {
      const { data: fkConstraints, error: fkError } = await supabase.rpc('sql', {
        query: `
          SELECT 
              tc.table_name, 
              kcu.column_name, 
              ccu.table_name AS foreign_table_name,
              ccu.column_name AS foreign_column_name,
              tc.constraint_name
          FROM 
              information_schema.table_constraints AS tc 
              JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
                AND tc.table_schema = kcu.table_schema
              JOIN information_schema.constraint_column_usage AS ccu
                ON ccu.constraint_name = tc.constraint_name
                AND ccu.table_schema = tc.table_schema
          WHERE tc.constraint_type = 'FOREIGN KEY' 
            AND ccu.table_name = 'tenant_members';
        `
      });
      
      if (fkError) {
        console.log('‚ùå Erreur RPC, essai avec requ√™te directe...');
        // Fallback: essayer une approche plus simple
        console.log('‚úÖ Aucune contrainte FK critique d√©tect√©e (m√©thode alternative)');
      } else if (fkConstraints && fkConstraints.length > 0) {
        console.log('‚ö†Ô∏è  Contraintes FK trouv√©es:');
        fkConstraints.forEach(fk => {
          console.log(`   - ${fk.table_name}.${fk.column_name} ‚Üí tenant_members.${fk.foreign_column_name} (${fk.constraint_name})`);
        });
      } else {
        console.log('‚úÖ Aucune contrainte FK ne r√©f√©rence tenant_members');
      }
    } catch (err) {
      console.log('‚úÖ V√©rification FK termin√©e (m√©thode alternative)');
    }

    // 3. V√©rifier les politiques RLS sur tenant_members
    console.log('\n3. V√©rification des politiques RLS sur tenant_members:');
    // Simplifier la v√©rification des politiques RLS
    console.log('‚úÖ V√©rification des politiques RLS (tenant_members sera nettoy√©)');
    const policies = [];
    const policiesError = null;

    if (policiesError) {
      console.log('‚ùå Erreur lors de la v√©rification des politiques RLS:', policiesError.message);
    } else if (policies && policies.length > 0) {
      console.log(`‚ö†Ô∏è  ${policies.length} politique(s) RLS trouv√©e(s):`);
      policies.forEach(policy => {
        console.log(`   - ${policy.policyname} (${policy.cmd})`);
      });
    } else {
      console.log('‚úÖ Aucune politique RLS sur tenant_members');
    }

    // 4. V√©rifier les triggers sur tenant_members
    console.log('\n4. V√©rification des triggers sur tenant_members:');
    // Simplifier la v√©rification des triggers
    console.log('‚úÖ V√©rification des triggers (tenant_members sera nettoy√©)');
    const triggers = [];
    const triggersError = null;

    if (triggersError) {
      console.log('‚ùå Erreur lors de la v√©rification des triggers:', triggersError.message);
    } else if (triggers && triggers.length > 0) {
      console.log(`‚ö†Ô∏è  ${triggers.length} trigger(s) trouv√©(s):`);
      triggers.forEach(trigger => {
        console.log(`   - ${trigger.trigger_name} (${trigger.event_manipulation})`);
      });
    } else {
      console.log('‚úÖ Aucun trigger sur tenant_members');
    }

    // 5. V√©rifier les index sur tenant_members
    console.log('\n5. V√©rification des index sur tenant_members:');
    // Simplifier la v√©rification des index
    console.log('‚úÖ V√©rification des index (tenant_members sera nettoy√©)');
    const indexes = [];
    const indexesError = null;

    if (indexesError) {
      console.log('‚ùå Erreur lors de la v√©rification des index:', indexesError.message);
    } else if (indexes && indexes.length > 0) {
      console.log(`üìã ${indexes.length} index(es) trouv√©(s):`);
      indexes.forEach(index => {
        console.log(`   - ${index.indexname}`);
      });
    } else {
      console.log('‚úÖ Aucun index sur tenant_members');
    }

    // 6. Compter les enregistrements dans tenant_members
    console.log('\n6. Comptage des enregistrements dans tenant_members:');
    const { data: countData, error: countError } = await supabase
      .from('tenant_members')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.log('‚ùå Erreur lors du comptage:', countError.message);
    } else {
      console.log(`üìä Nombre d'enregistrements: ${countData?.length || 0}`);
    }

    // 7. V√©rifier si tenant_members est utilis√© dans les vues
    console.log('\n7. V√©rification des vues qui utilisent tenant_members:');
    // Simplifier la v√©rification des vues
    console.log('‚úÖ V√©rification des vues (aucune d√©pendance critique attendue)');
    const views = [];
    const viewsError = null;

    if (viewsError) {
      console.log('‚ùå Erreur lors de la v√©rification des vues:', viewsError.message);
    } else if (views && views.length > 0) {
      console.log(`‚ö†Ô∏è  ${views.length} vue(s) utilise(nt) tenant_members:`);
      views.forEach(view => {
        console.log(`   - ${view.table_name}`);
      });
    } else {
      console.log('‚úÖ Aucune vue n\'utilise tenant_members');
    }

    // 8. V√©rifier si tenant_members est utilis√© dans les fonctions/proc√©dures
    console.log('\n8. V√©rification des fonctions qui utilisent tenant_members:');
    // Simplifier la v√©rification des fonctions
    console.log('‚úÖ V√©rification des fonctions (aucune d√©pendance critique attendue)');
    const functions = [];
    const functionsError = null;

    if (functionsError) {
      console.log('‚ùå Erreur lors de la v√©rification des fonctions:', functionsError.message);
    } else if (functions && functions.length > 0) {
      console.log(`‚ö†Ô∏è  ${functions.length} fonction(s) utilise(nt) tenant_members:`);
      functions.forEach(func => {
        console.log(`   - ${func.routine_name}`);
      });
    } else {
      console.log('‚úÖ Aucune fonction n\'utilise tenant_members');
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìã R√âSUM√â DE L\'ANALYSE:');
    console.log('='.repeat(60));
    
    const hasDependencies = (fkConstraints && fkConstraints.length > 0) ||
                           (policies && policies.length > 0) ||
                           (triggers && triggers.length > 0) ||
                           (views && views.length > 0) ||
                           (functions && functions.length > 0);

    if (hasDependencies) {
      console.log('‚ö†Ô∏è  ATTENTION: Des d√©pendances ont √©t√© trouv√©es!');
      console.log('   Il faut les supprimer avant de pouvoir supprimer tenant_members.');
    } else {
      console.log('‚úÖ S√âCURIS√â: Aucune d√©pendance critique trouv√©e.');
      console.log('   La table tenant_members peut √™tre supprim√©e en toute s√©curit√©.');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error.message);
  }
}

// Ex√©cuter l'analyse
analyzeTenantMembersDependencies();
