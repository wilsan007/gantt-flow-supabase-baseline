import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://qliinxtanjdnwxlvnxji.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaWlueHRhbmpkbnd4bHZueGppIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzE2ODYxMywiZXhwIjoyMDcyNzQ0NjEzfQ.THSC4CaaEh0IJPP-zPRXGFIbltg79wpOGoEG4diLZAI';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkAndFixSuperAdmin() {
  console.log('üîç V√âRIFICATION ET CORRECTION SUPER ADMIN');
  console.log('========================================');
  
  const superAdminId = '5c5731ce-75d0-4455-8184-bc42c626cb17';
  
  try {
    // 1. V√âRIFIER LES R√îLES EXISTANTS
    console.log('\n1Ô∏è‚É£ V√âRIFICATION DES R√îLES...');
    
    const { data: roles, error: rolesError } = await supabase
      .from('roles')
      .select('*')
      .order('name');
    
    if (rolesError) {
      console.error('‚ùå Erreur r√©cup√©ration r√¥les:', rolesError);
      return;
    }
    
    console.log('üìã R√¥les disponibles:');
    roles.forEach(role => {
      console.log(`   - ${role.name} (ID: ${role.id})`);
    });
    
    // Chercher le r√¥le Super Admin
    const superAdminRole = roles.find(r => r.name === 'Super Admin');
    
    if (!superAdminRole) {
      console.log('‚ùå R√¥le "Super Admin" non trouv√©');
      
      // Cr√©er le r√¥le Super Admin
      console.log('üîß Cr√©ation du r√¥le Super Admin...');
      
      const { data: newRole, error: createRoleError } = await supabase
        .from('roles')
        .insert({
          name: 'Super Admin',
          description: 'Acc√®s complet au syst√®me',
          permissions: {
            all: true,
            create_tenants: true,
            manage_users: true,
            system_admin: true
          },
          is_system_role: true
        })
        .select()
        .single();
      
      if (createRoleError) {
        console.error('‚ùå Erreur cr√©ation r√¥le:', createRoleError);
        return;
      }
      
      console.log('‚úÖ R√¥le Super Admin cr√©√©:', newRole.id);
      superAdminRole = newRole;
    } else {
      console.log('‚úÖ R√¥le Super Admin trouv√©:', superAdminRole.id);
    }
    
    // 2. V√âRIFIER LES ASSIGNATIONS DE R√îLES POUR CET UTILISATEUR
    console.log('\n2Ô∏è‚É£ V√âRIFICATION ASSIGNATIONS UTILISATEUR...');
    
    const { data: userRoles, error: userRolesError } = await supabase
      .from('user_roles')
      .select('*, roles(*)')
      .eq('user_id', superAdminId);
    
    if (userRolesError) {
      console.error('‚ùå Erreur r√©cup√©ration user_roles:', userRolesError);
      return;
    }
    
    console.log(`üìã R√¥les assign√©s √† ${superAdminId}:`);
    if (userRoles.length === 0) {
      console.log('   - Aucun r√¥le assign√©');
    } else {
      userRoles.forEach(ur => {
        console.log(`   - ${ur.roles.name} (Actif: ${ur.is_active})`);
      });
    }
    
    // 3. ASSIGNER LE R√îLE SUPER ADMIN SI N√âCESSAIRE
    const hasSuperAdminRole = userRoles.some(ur => 
      ur.roles.name === 'Super Admin' && ur.is_active
    );
    
    if (!hasSuperAdminRole) {
      console.log('\n3Ô∏è‚É£ ASSIGNATION R√îLE SUPER ADMIN...');
      
      const { data: assignment, error: assignError } = await supabase
        .from('user_roles')
        .insert({
          user_id: superAdminId,
          role_id: superAdminRole.id,
          tenant_id: null, // Super Admin n'est pas li√© √† un tenant sp√©cifique
          assigned_by: superAdminId, // Auto-assign√©
          assigned_at: new Date().toISOString(),
          is_active: true
        })
        .select()
        .single();
      
      if (assignError) {
        console.error('‚ùå Erreur assignation r√¥le:', assignError);
        return;
      }
      
      console.log('‚úÖ R√¥le Super Admin assign√©:', assignment.id);
    } else {
      console.log('‚úÖ Utilisateur a d√©j√† le r√¥le Super Admin');
    }
    
    // 4. V√âRIFIER LE PROFIL UTILISATEUR
    console.log('\n4Ô∏è‚É£ V√âRIFICATION PROFIL UTILISATEUR...');
    
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', superAdminId)
      .single();
    
    if (profileError) {
      console.log('‚ö†Ô∏è Profil non trouv√©, cr√©ation...');
      
      const { data: newProfile, error: createProfileError } = await supabase
        .from('profiles')
        .insert({
          user_id: superAdminId,
          full_name: 'Super Admin',
          email: 'osman.awaleh.adn@gmail.com',
          employee_id: 'SA001',
          position: 'Super Administrateur',
          department: 'Syst√®me',
          hire_date: new Date().toISOString().split('T')[0],
          status: 'active',
          tenant_id: null // Super Admin n'appartient √† aucun tenant
        })
        .select()
        .single();
      
      if (createProfileError) {
        console.error('‚ùå Erreur cr√©ation profil:', createProfileError);
      } else {
        console.log('‚úÖ Profil Super Admin cr√©√©');
      }
    } else {
      console.log('‚úÖ Profil trouv√©:', profile.full_name);
    }
    
    // 5. TEST FINAL
    console.log('\n5Ô∏è‚É£ TEST FINAL is_super_admin...');
    
    const { data: finalTest, error: finalError } = await supabase
      .rpc('is_super_admin', { user_id: superAdminId });
    
    if (finalError) {
      console.error('‚ùå Erreur test final:', finalError);
    } else {
      console.log('‚úÖ Test is_super_admin:', finalTest);
      
      if (finalTest) {
        console.log('üéâ SUPER ADMIN CONFIGUR√â AVEC SUCC√àS !');
        
        // Maintenant tester l'Edge Function
        console.log('\n6Ô∏è‚É£ TEST EDGE FUNCTION...');
        
        try {
          const response = await fetch(
            `${supabaseUrl}/functions/v1/send-invitation`,
            {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${supabaseServiceKey}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                email: `test-fixed-super-admin-${Date.now()}@example.com`,
                fullName: 'Test Fixed Super Admin',
                invitationType: 'tenant_owner',
                siteUrl: 'http://localhost:8080'
              }),
            }
          );
          
          if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Edge Function SUCCESS:', result);
            
            // Nettoyer
            if (result.invitation_id) {
              await supabase.from('invitations').delete().eq('id', result.invitation_id);
              console.log('üßπ Invitation de test nettoy√©e');
            }
          } else {
            const error = await response.text();
            console.error('‚ùå Edge Function FAILED:', error);
          }
        } catch (err) {
          console.error('‚ùå Exception Edge Function:', err.message);
        }
      } else {
        console.log('‚ùå Super Admin toujours non reconnu');
      }
    }
    
  } catch (error) {
    console.error('üí• Erreur g√©n√©rale:', error);
  }
}

checkAndFixSuperAdmin();
