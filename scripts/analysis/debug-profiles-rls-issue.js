import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_SERVICE_ROLE_KEY
);

async function debugProfilesRLSIssue() {
  console.log('üîç DEBUG: R√âCURSION INFINIE POLITIQUES RLS PROFILES');
  console.log('==================================================\n');

  try {
    // 1. V√©rifier les politiques actuelles sur profiles
    console.log('1Ô∏è‚É£ V√©rification des politiques RLS actuelles...');
    const { data: policies, error: policiesError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check
        FROM pg_policies 
        WHERE tablename = 'profiles' 
        ORDER BY policyname;
      `
    });

    if (policiesError) {
      console.error('‚ùå Erreur r√©cup√©ration politiques:', policiesError);
    } else {
      console.log(`üìã Politiques trouv√©es: ${policies.length}`);
      policies.forEach(policy => {
        console.log(`   - ${policy.policyname}: ${policy.cmd} (${policy.qual})`);
      });
    }

    // 2. Tester l'acc√®s direct avec service role
    console.log('\n2Ô∏è‚É£ Test acc√®s avec service role...');
    const { data: profilesServiceRole, error: serviceError } = await supabase
      .from('profiles')
      .select('id, user_id, email, full_name, tenant_id')
      .limit(5);

    if (serviceError) {
      console.error('‚ùå Erreur service role:', serviceError);
    } else {
      console.log(`‚úÖ Service role OK: ${profilesServiceRole.length} profils`);
    }

    // 3. Identifier la source de la r√©cursion
    console.log('\n3Ô∏è‚É£ Analyse de la r√©cursion...');
    console.log('La r√©cursion vient probablement de:');
    console.log('   - Politique qui r√©f√©rence profiles dans sa condition');
    console.log('   - Fonction qui appelle profiles depuis une politique sur profiles');
    console.log('   - get_user_tenant_id() qui SELECT sur profiles depuis une politique profiles');

    // 4. Proposer la correction
    console.log('\n4Ô∏è‚É£ Application de la correction...');
    console.log('Ex√©cution du script fix-profiles-rls-recursion.sql...');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le debug
debugProfilesRLSIssue();
