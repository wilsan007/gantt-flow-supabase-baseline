-- Migration: Ajuster les dates des t√¢ches pour qu'elles soient dans la plage des projets
-- Date: 2025-01-10
-- Description: Corrige les t√¢ches dont les dates sont en dehors de la plage de leur projet

BEGIN;

-- ============================================
-- 1. ANALYSE DES PROBL√àMES
-- ============================================

-- Afficher les t√¢ches avec dates incoh√©rentes
DO $$
DECLARE
  task_record RECORD;
  project_record RECORD;
BEGIN
  RAISE NOTICE 'üîç Analyse des t√¢ches avec dates incoh√©rentes...';
  RAISE NOTICE '';
  
  FOR task_record IN 
    SELECT 
      t.id,
      t.title,
      t.start_date as task_start,
      t.due_date as task_end,
      t.project_id,
      p.name as project_name,
      p.start_date as project_start,
      p.end_date as project_end
    FROM tasks t
    JOIN projects p ON t.project_id = p.id
    WHERE 
      t.project_id IS NOT NULL
      AND (
        t.start_date < p.start_date 
        OR t.due_date > p.end_date
      )
    ORDER BY p.name, t.start_date
  LOOP
    RAISE NOTICE '‚ùå T√¢che: % (Projet: %)', task_record.title, task_record.project_name;
    RAISE NOTICE '   T√¢che: % ‚Üí %', task_record.task_start, task_record.task_end;
    RAISE NOTICE '   Projet: % ‚Üí %', task_record.project_start, task_record.project_end;
    RAISE NOTICE '';
  END LOOP;
END $$;

-- ============================================
-- 2. CORRECTION DES DATES
-- ============================================

-- Strat√©gie: Ajuster les dates des t√¢ches pour qu'elles soient dans la plage du projet
-- en conservant la dur√©e originale de la t√¢che

DO $$
BEGIN
  RAISE NOTICE 'üîß Correction des dates des t√¢ches...';
  RAISE NOTICE '';
END $$;

-- Pour chaque t√¢che dont la date de d√©but est avant le projet
UPDATE tasks t
SET 
  start_date = p.start_date,
  due_date = CASE 
    -- Si la dur√©e de la t√¢che d√©passe la fin du projet, ajuster la fin
    WHEN p.start_date + (t.due_date - t.start_date) > p.end_date 
    THEN p.end_date
    -- Sinon, conserver la dur√©e originale
    ELSE p.start_date + (t.due_date - t.start_date)
  END,
  updated_at = NOW()
FROM projects p
WHERE 
  t.project_id = p.id
  AND t.start_date < p.start_date;

-- Pour chaque t√¢che dont la date de fin est apr√®s le projet
UPDATE tasks t
SET 
  due_date = p.end_date,
  start_date = CASE 
    -- Si en reculant la fin, le d√©but devient avant le projet, ajuster le d√©but
    WHEN p.end_date - (t.due_date - t.start_date) < p.start_date 
    THEN p.start_date
    -- Sinon, conserver la dur√©e originale
    ELSE p.end_date - (t.due_date - t.start_date)
  END,
  updated_at = NOW()
FROM projects p
WHERE 
  t.project_id = p.id
  AND t.due_date > p.end_date
  AND t.start_date >= p.start_date; -- √âviter de traiter deux fois les m√™mes t√¢ches

-- ============================================
-- 3. V√âRIFICATION POST-CORRECTION
-- ============================================

DO $$
DECLARE
  remaining_issues INTEGER;
BEGIN
  SELECT COUNT(*) INTO remaining_issues
  FROM tasks t
  JOIN projects p ON t.project_id = p.id
  WHERE 
    t.project_id IS NOT NULL
    AND (
      t.start_date < p.start_date 
      OR t.due_date > p.end_date
    );
  
  IF remaining_issues > 0 THEN
    RAISE NOTICE '‚ö†Ô∏è  Il reste % t√¢che(s) avec des dates incoh√©rentes', remaining_issues;
  ELSE
    RAISE NOTICE '‚úÖ Toutes les dates des t√¢ches sont maintenant coh√©rentes avec leurs projets';
  END IF;
END $$;

COMMIT;
