-- SYST√àME AUTOMATIQUE COMPLET DE CR√âATION TENANT
-- Solution d√©finitive pour tous les utilisateurs avec donn√©es compl√®tes
-- COPIE EXACTE de la fonction debug_tenant_creation du fichier complete-tenant-creation-with-permissions.sql
-- Test√©e et valid√©e avec test-complete-tenant-creation.js

-- 1. FONCTION PRINCIPALE : Auto-cr√©ation compl√®te tenant owner
-- Adapt√©e de debug_tenant_creation pour fonctionner comme trigger
CREATE OR REPLACE FUNCTION auto_create_complete_tenant_owner()
RETURNS TRIGGER AS $$
DECLARE
  invitation_data RECORD;
  tenant_admin_role_id UUID;
  created_employee_id UUID;
  employee_id_counter INTEGER;
  generated_employee_id TEXT;
  company_name TEXT;
  permission_record RECORD;
  debug_log TEXT := '';
BEGIN
  debug_log := debug_log || 'üîç D√âBUT DEBUG TENANT CREATION COMPLET pour: ' || NEW.email || E'\n';

  -- 1. Utilisateur d√©j√† disponible dans NEW (pas besoin de recherche)
  debug_log := debug_log || '1Ô∏è‚É£ Utilisateur trouv√©: ' || NEW.id || E'\n';

  -- 2. V√©rifier si profil existe d√©j√†
  debug_log := debug_log || '2Ô∏è‚É£ V√©rification profil existant...' || E'\n';
  
  IF EXISTS (SELECT 1 FROM public.profiles WHERE user_id = NEW.id) THEN
    debug_log := debug_log || '‚ùå ERREUR: Profil existe d√©j√†' || E'\n';
    RAISE NOTICE '%', debug_log;
    RETURN NEW;
  END IF;

  debug_log := debug_log || '‚úÖ Aucun profil existant' || E'\n';

  -- 3. Rechercher invitation
  debug_log := debug_log || '3Ô∏è‚É£ Recherche invitation...' || E'\n';
  
  SELECT * INTO invitation_data
  FROM public.invitations
  WHERE email = NEW.email
    AND status = 'pending'
    AND expires_at > now()
    AND invitation_type = 'tenant_owner';
    
  IF NOT FOUND THEN
    debug_log := debug_log || '‚ùå ERREUR: Aucune invitation tenant_owner valide trouv√©e' || E'\n';
    RAISE NOTICE '%', debug_log;
    RETURN NEW;
  END IF;

  debug_log := debug_log || '‚úÖ Invitation trouv√©e: ' || invitation_data.id || E'\n';

  -- 4. V√©rifier/cr√©er r√¥le tenant_admin avec permissions
  debug_log := debug_log || '4Ô∏è‚É£ V√©rification/cr√©ation r√¥le tenant_admin...' || E'\n';
  
  SELECT id INTO tenant_admin_role_id
  FROM public.roles
  WHERE name = 'tenant_admin';
  
  IF tenant_admin_role_id IS NULL THEN
    debug_log := debug_log || '‚ö†Ô∏è R√¥le tenant_admin non trouv√©, cr√©ation...' || E'\n';
    
    BEGIN
      INSERT INTO public.roles (name, description, created_at, updated_at)
      VALUES ('tenant_admin', 'Administrateur de tenant', now(), now())
      RETURNING id INTO tenant_admin_role_id;
      
      debug_log := debug_log || '‚úÖ R√¥le tenant_admin cr√©√©: ' || tenant_admin_role_id || E'\n';
    EXCEPTION
      WHEN OTHERS THEN
        debug_log := debug_log || '‚ùå ERREUR cr√©ation r√¥le: ' || SQLERRM || E'\n';
        RAISE NOTICE '%', debug_log;
        RETURN NEW;
    END;
  ELSE
    debug_log := debug_log || '‚úÖ R√¥le tenant_admin existant: ' || tenant_admin_role_id || E'\n';
  END IF;

  -- 5. Assigner permissions au r√¥le tenant_admin
  debug_log := debug_log || '5Ô∏è‚É£ Attribution permissions tenant_admin...' || E'\n';
  
  BEGIN
    -- Permissions essentielles pour tenant_admin
    FOR permission_record IN 
      SELECT id, name FROM public.permissions 
      WHERE name IN (
        'admin_all', 'roles_manage', 'user_roles_assign',
        'employees_create', 'employees_read', 'employees_update', 'employees_delete',
        'projects_create', 'projects_read', 'projects_update', 'projects_delete',
        'tasks_create', 'tasks_read', 'tasks_update', 'tasks_delete',
        'leave_manage', 'expense_manage', 'payroll_manage'
      )
    LOOP
      -- Ins√©rer dans role_permissions si pas d√©j√† pr√©sent
      INSERT INTO public.role_permissions (role_id, permission_id, created_at)
      VALUES (tenant_admin_role_id, permission_record.id, now())
      ON CONFLICT (role_id, permission_id) DO NOTHING;
      
      debug_log := debug_log || '  ‚úÖ Permission assign√©e: ' || permission_record.name || E'\n';
    END LOOP;
    
    debug_log := debug_log || '‚úÖ Permissions tenant_admin configur√©es' || E'\n';
  EXCEPTION
    WHEN OTHERS THEN
      debug_log := debug_log || '‚ùå ERREUR attribution permissions: ' || SQLERRM || E'\n';
      RAISE NOTICE '%', debug_log;
      RETURN NEW;
  END;

  -- 6. Pr√©parer nom entreprise
  debug_log := debug_log || '6Ô∏è‚É£ Pr√©paration nom entreprise...' || E'\n';
  
  company_name := COALESCE(
    invitation_data.metadata->>'company_name',
    invitation_data.full_name || ' Company'
  );
  
  debug_log := debug_log || '‚úÖ Nom entreprise: ' || company_name || E'\n';

  -- 7. Cr√©er le tenant
  debug_log := debug_log || '7Ô∏è‚É£ Cr√©ation tenant...' || E'\n';
  
  BEGIN
    INSERT INTO public.tenants (
      id,
      name,
      status,
      created_at,
      updated_at
    ) VALUES (
      invitation_data.tenant_id,
      company_name,
      'active',
      now(),
      now()
    );
    
    debug_log := debug_log || '‚úÖ Tenant cr√©√© avec succ√®s' || E'\n';
  EXCEPTION
    WHEN OTHERS THEN
      debug_log := debug_log || '‚ùå ERREUR cr√©ation tenant: ' || SQLERRM || E'\n';
      RAISE NOTICE '%', debug_log;
      RETURN NEW;
  END;

  -- 8. Cr√©er le profil (OBLIGATOIRE AVANT EMPLOY√â)
  debug_log := debug_log || '8Ô∏è‚É£ Cr√©ation profil tenant_admin...' || E'\n';
  
  BEGIN
    INSERT INTO public.profiles (
      user_id,
      tenant_id,
      full_name,
      email,
      role,
      created_at,
      updated_at
    ) VALUES (
      NEW.id,
      invitation_data.tenant_id,
      COALESCE(NEW.raw_user_meta_data->>'full_name', invitation_data.full_name),
      NEW.email,
      'tenant_admin',
      now(),
      now()
    );
    
    debug_log := debug_log || '‚úÖ Profil tenant_admin cr√©√©' || E'\n';
  EXCEPTION
    WHEN OTHERS THEN
      debug_log := debug_log || '‚ùå ERREUR cr√©ation profil: ' || SQLERRM || E'\n';
      RAISE NOTICE '%', debug_log;
      RETURN NEW;
  END;

  -- 9. Cr√©er user_roles (tenant_admin)
  debug_log := debug_log || '9Ô∏è‚É£ Cr√©ation user_roles tenant_admin...' || E'\n';
  
  BEGIN
    INSERT INTO public.user_roles (
      user_id,
      role_id,
      tenant_id,
      is_active,
      created_at
    ) VALUES (
      NEW.id,
      tenant_admin_role_id,
      invitation_data.tenant_id,
      true,
      now()
    );
    
    debug_log := debug_log || '‚úÖ User_roles tenant_admin cr√©√©' || E'\n';
  EXCEPTION
    WHEN OTHERS THEN
      debug_log := debug_log || '‚ùå ERREUR cr√©ation user_roles: ' || SQLERRM || E'\n';
      RAISE NOTICE '%', debug_log;
      RETURN NEW;
  END;

  -- 10. G√©n√©rer employee_id unique
  debug_log := debug_log || 'üîü G√©n√©ration employee_id...' || E'\n';
  
  SELECT COALESCE(MAX(CAST(SUBSTRING(employee_id FROM 4) AS INTEGER)), 0) + 1
  INTO employee_id_counter
  FROM public.employees 
  WHERE employee_id ~ '^EMP[0-9]+$';
  
  generated_employee_id := 'EMP' || LPAD(employee_id_counter::TEXT, 3, '0');
  debug_log := debug_log || '‚úÖ Employee ID g√©n√©r√©: ' || generated_employee_id || E'\n';

  -- 11. Cr√©er employ√© tenant administrateur
  debug_log := debug_log || '1Ô∏è‚É£1Ô∏è‚É£ Cr√©ation employ√© tenant administrateur...' || E'\n';
  
  BEGIN
    INSERT INTO public.employees (
      user_id,
      employee_id,
      full_name,
      email,
      job_title,
      hire_date,
      contract_type,
      status,
      tenant_id,
      created_at,
      updated_at
    ) VALUES (
      NEW.id,
      generated_employee_id,
      COALESCE(NEW.raw_user_meta_data->>'full_name', invitation_data.full_name),
      NEW.email,
      'Tenant Administrateur',
      CURRENT_DATE,
      'CDI',
      'active',
      invitation_data.tenant_id,
      now(),
      now()
    ) RETURNING id INTO created_employee_id;
    
    debug_log := debug_log || '‚úÖ Employ√© tenant administrateur cr√©√©: ' || created_employee_id || E'\n';
  EXCEPTION
    WHEN OTHERS THEN
      debug_log := debug_log || '‚ùå ERREUR cr√©ation employ√©: ' || SQLERRM || E'\n';
      RAISE NOTICE '%', debug_log;
      RETURN NEW;
  END;

  -- 12. Marquer invitation comme accept√©e
  debug_log := debug_log || '1Ô∏è‚É£2Ô∏è‚É£ Mise √† jour invitation...' || E'\n';
  
  BEGIN
    UPDATE public.invitations
    SET 
      status = 'accepted',
      accepted_at = now(),
      metadata = jsonb_set(
        COALESCE(metadata, '{}'::jsonb),
        '{completed_by}',
        to_jsonb(NEW.id)
      )
    WHERE id = invitation_data.id;
    
    debug_log := debug_log || '‚úÖ Invitation marqu√©e comme accept√©e' || E'\n';
  EXCEPTION
    WHEN OTHERS THEN
      debug_log := debug_log || '‚ùå ERREUR mise √† jour invitation: ' || SQLERRM || E'\n';
      RAISE NOTICE '%', debug_log;
      RETURN NEW;
  END;

  debug_log := debug_log || 'üéâ SUCC√àS COMPLET AVEC PERMISSIONS!' || E'\n';
  RAISE NOTICE '%', debug_log;

  RETURN NEW;

EXCEPTION
  WHEN OTHERS THEN
    debug_log := debug_log || 'üí• ERREUR G√âN√âRALE: ' || SQLERRM || E'\n';
    RAISE NOTICE '%', debug_log;
    -- Log de l'erreur mais ne pas bloquer la connexion
    RAISE WARNING 'Erreur auto-cr√©ation tenant owner: %', SQLERRM;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 2. FONCTION DE R√âPARATION pour utilisateurs existants incomplets
CREATE OR REPLACE FUNCTION repair_incomplete_users()
RETURNS JSON AS $$
DECLARE
  user_record RECORD;
  repaired_count INTEGER := 0;
  error_count INTEGER := 0;
  repair_log TEXT := '';
  result_details JSONB := '[]'::jsonb;
BEGIN
  repair_log := repair_log || 'üîß D√âBUT R√âPARATION UTILISATEURS INCOMPLETS' || E'\n';

  -- Trouver tous les utilisateurs dans auth.users qui n'ont pas de profil
  -- mais qui ont une invitation tenant_owner valide
  FOR user_record IN
    SELECT DISTINCT u.id, u.email, u.raw_user_meta_data
    FROM auth.users u
    WHERE NOT EXISTS (
      SELECT 1 FROM public.profiles p WHERE p.user_id = u.id
    )
    AND EXISTS (
      SELECT 1 FROM public.invitations i 
      WHERE i.email = u.email 
        AND i.status = 'pending'
        AND i.expires_at > now()
        AND i.invitation_type = 'tenant_owner'
    )
  LOOP
    repair_log := repair_log || 'üîç R√©paration utilisateur: ' || user_record.email || E'\n';
    
    BEGIN
      -- Simuler un trigger INSERT pour cet utilisateur
      PERFORM auto_create_complete_tenant_owner_for_existing(user_record.id, user_record.email, user_record.raw_user_meta_data);
      
      repaired_count := repaired_count + 1;
      repair_log := repair_log || '‚úÖ Utilisateur r√©par√©: ' || user_record.email || E'\n';
      
      -- Ajouter aux d√©tails du r√©sultat
      result_details := result_details || jsonb_build_object(
        'user_id', user_record.id,
        'email', user_record.email,
        'status', 'repaired'
      );
      
    EXCEPTION
      WHEN OTHERS THEN
        error_count := error_count + 1;
        repair_log := repair_log || '‚ùå Erreur r√©paration ' || user_record.email || ': ' || SQLERRM || E'\n';
        
        -- Ajouter aux d√©tails du r√©sultat
        result_details := result_details || jsonb_build_object(
          'user_id', user_record.id,
          'email', user_record.email,
          'status', 'error',
          'error', SQLERRM
        );
    END;
  END LOOP;

  repair_log := repair_log || 'üéØ R√âSULTAT R√âPARATION: ' || repaired_count || ' r√©par√©s, ' || error_count || ' erreurs' || E'\n';
  RAISE NOTICE '%', repair_log;

  RETURN json_build_object(
    'success', true,
    'repaired_count', repaired_count,
    'error_count', error_count,
    'repair_log', repair_log,
    'details', result_details
  );

EXCEPTION
  WHEN OTHERS THEN
    repair_log := repair_log || 'üí• ERREUR G√âN√âRALE R√âPARATION: ' || SQLERRM || E'\n';
    RAISE NOTICE '%', repair_log;
    RETURN json_build_object(
      'success', false,
      'error', 'Erreur g√©n√©rale: ' || SQLERRM,
      'repair_log', repair_log
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. FONCTION AUXILIAIRE pour r√©paration utilisateurs existants
CREATE OR REPLACE FUNCTION auto_create_complete_tenant_owner_for_existing(
  user_id UUID,
  user_email TEXT,
  user_metadata JSONB
)
RETURNS VOID AS $$
DECLARE
  invitation_data RECORD;
  tenant_admin_role_id UUID;
  created_employee_id UUID;
  employee_id_counter INTEGER;
  generated_employee_id TEXT;
  company_name TEXT;
  permission_record RECORD;
BEGIN
  -- Chercher une invitation en attente pour cet email
  SELECT * INTO invitation_data
  FROM public.invitations
  WHERE email = user_email
    AND status = 'pending'
    AND expires_at > now()
    AND invitation_type = 'tenant_owner';
    
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Aucune invitation tenant_owner valide pour %', user_email;
  END IF;

  -- V√©rifier/cr√©er r√¥le tenant_admin
  SELECT id INTO tenant_admin_role_id
  FROM public.roles
  WHERE name = 'tenant_admin';
  
  IF tenant_admin_role_id IS NULL THEN
    INSERT INTO public.roles (name, description, created_at, updated_at)
    VALUES ('tenant_admin', 'Administrateur de tenant', now(), now())
    RETURNING id INTO tenant_admin_role_id;
  END IF;

  -- Assigner permissions au r√¥le tenant_admin
  FOR permission_record IN 
    SELECT id, name FROM public.permissions 
    WHERE name IN (
      'admin_all', 'roles_manage', 'user_roles_assign',
      'employees_create', 'employees_read', 'employees_update', 'employees_delete',
      'projects_create', 'projects_read', 'projects_update', 'projects_delete',
      'tasks_create', 'tasks_read', 'tasks_update', 'tasks_delete',
      'leave_manage', 'expense_manage', 'payroll_manage'
    )
  LOOP
    INSERT INTO public.role_permissions (role_id, permission_id, created_at)
    VALUES (tenant_admin_role_id, permission_record.id, now())
    ON CONFLICT (role_id, permission_id) DO NOTHING;
  END LOOP;

  -- Pr√©parer nom entreprise
  company_name := COALESCE(
    invitation_data.metadata->>'company_name',
    invitation_data.full_name || ' Company'
  );

  -- Cr√©er le tenant
  INSERT INTO public.tenants (
    id, name, status, created_at, updated_at
  ) VALUES (
    invitation_data.tenant_id, company_name, 'active', now(), now()
  );

  -- Cr√©er le profil
  INSERT INTO public.profiles (
    user_id, tenant_id, full_name, email, role, created_at, updated_at
  ) VALUES (
    user_id, invitation_data.tenant_id,
    COALESCE(user_metadata->>'full_name', invitation_data.full_name),
    user_email, 'tenant_admin', now(), now()
  );

  -- Cr√©er user_roles
  INSERT INTO public.user_roles (
    user_id, role_id, tenant_id, is_active, created_at
  ) VALUES (
    user_id, tenant_admin_role_id, invitation_data.tenant_id, true, now()
  );

  -- G√©n√©rer employee_id unique
  SELECT COALESCE(MAX(CAST(SUBSTRING(employee_id FROM 4) AS INTEGER)), 0) + 1
  INTO employee_id_counter
  FROM public.employees 
  WHERE employee_id ~ '^EMP[0-9]+$';
  
  generated_employee_id := 'EMP' || LPAD(employee_id_counter::TEXT, 3, '0');

  -- Cr√©er employ√©
  INSERT INTO public.employees (
    user_id, employee_id, full_name, email, job_title, hire_date,
    contract_type, status, tenant_id, created_at, updated_at
  ) VALUES (
    user_id, generated_employee_id,
    COALESCE(user_metadata->>'full_name', invitation_data.full_name),
    user_email, 'Tenant Administrateur', CURRENT_DATE,
    'CDI', 'active', invitation_data.tenant_id, now(), now()
  );

  -- Marquer invitation comme accept√©e
  UPDATE public.invitations
  SET status = 'accepted', accepted_at = now(),
      metadata = jsonb_set(COALESCE(metadata, '{}'::jsonb), '{completed_by}', to_jsonb(user_id))
  WHERE id = invitation_data.id;

END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 4. REMPLACER LE TRIGGER EXISTANT
DROP TRIGGER IF EXISTS auto_tenant_creation_trigger ON auth.users;

CREATE TRIGGER auto_tenant_creation_trigger_complete
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION auto_create_complete_tenant_owner();

-- 5. ACCORDER LES PERMISSIONS
GRANT EXECUTE ON FUNCTION auto_create_complete_tenant_owner TO authenticated;
GRANT EXECUTE ON FUNCTION auto_create_complete_tenant_owner TO anon;
GRANT EXECUTE ON FUNCTION repair_incomplete_users TO authenticated;
GRANT EXECUTE ON FUNCTION repair_incomplete_users TO anon;
GRANT EXECUTE ON FUNCTION auto_create_complete_tenant_owner_for_existing TO authenticated;
GRANT EXECUTE ON FUNCTION auto_create_complete_tenant_owner_for_existing TO anon;

-- 6. COMMENTAIRES
COMMENT ON FUNCTION auto_create_complete_tenant_owner IS 'Syst√®me automatique complet de cr√©ation tenant owner avec toutes les donn√©es (tenant, profil, r√¥les, permissions, employ√©)';
COMMENT ON FUNCTION repair_incomplete_users IS 'R√©pare automatiquement tous les utilisateurs existants avec donn√©es manquantes';
COMMENT ON FUNCTION auto_create_complete_tenant_owner_for_existing IS 'Fonction auxiliaire pour cr√©er tenant complet pour utilisateurs existants';

-- 7. INSTRUCTIONS D'UTILISATION
/*
UTILISATION:

1. NOUVEAU SYST√àME AUTOMATIQUE:
   - Le trigger se d√©clenche automatiquement √† chaque nouvelle inscription
   - Cr√©e automatiquement: tenant, profil, user_roles, permissions, employ√©
   - Ordre respect√© selon les contraintes de base de donn√©es

2. R√âPARATION UTILISATEURS EXISTANTS:
   SELECT repair_incomplete_users();
   
   Cette fonction trouve et r√©pare automatiquement tous les utilisateurs
   qui existent dans auth.users mais n'ont pas de profil/tenant.

3. MONITORING:
   - Tous les logs sont affich√©s via RAISE NOTICE
   - Les erreurs n'interrompent pas le processus de connexion
   - R√©sultats d√©taill√©s en JSON pour la fonction de r√©paration

4. S√âCURIT√â:
   - Fonctions avec SECURITY DEFINER
   - Permissions accord√©es aux utilisateurs authentifi√©s et anonymes
   - Gestion d'erreurs robuste
*/
