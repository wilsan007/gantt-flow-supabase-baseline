// Test complet du processus d'inscription tenant owner
// Ce script teste toutes les √©tapes du processus d'inscription

import { createClient } from '@supabase/supabase-js';
import { randomUUID } from 'crypto';

const supabaseUrl = 'https://qliinxtanjdnwxlvnxji.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsaWlueHRhbmpkbnd4bHZueGppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNjg2MTMsImV4cCI6MjA3Mjc0NDYxM30.13wLfMNJ2Joxpw9GWq2_ymJgPtQizZZUzRUDNVRhQzM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testTenantOwnerSignupProcess() {
  console.log('üß™ Test du processus complet d\'inscription tenant owner');
  console.log('=' .repeat(60));

  try {
    // 1. Tester directement la fonction signup_tenant_owner_v6
    console.log('\n1Ô∏è‚É£ Test de la fonction signup_tenant_owner_v6...');

    // 2. Cr√©er une invitation de test
    console.log('\n2Ô∏è‚É£ Cr√©ation d\'une invitation de test...');
    
    const testEmail = 'test-tenant@example.com';
    const testFullName = 'Test Tenant Owner';
    const testTenantId = randomUUID();
    const testToken = randomUUID();

    const { data: invitation, error: inviteError } = await supabase
      .from('invitations')
      .insert({
        token: testToken,
        email: testEmail,
        full_name: testFullName,
        tenant_id: testTenantId,
        invitation_type: 'tenant_owner',
        invited_by: '5c5731ce-75d0-4455-8184-bc42c626cb17', // Super Admin
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        status: 'pending'
      })
      .select()
      .single();

    if (inviteError) {
      console.error('‚ùå Erreur cr√©ation invitation:', inviteError);
      return;
    }

    console.log('‚úÖ Invitation cr√©√©e:', invitation.id);

    // 3. Cr√©er un utilisateur de test
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'un utilisateur de test...');
    
    const testUserId = randomUUID();
    
    // Simuler l'insertion dans auth.users (normalement fait par Supabase Auth)
    console.log('üìù User ID de test:', testUserId);

    // 4. Tester la fonction signup_tenant_owner_v6
    console.log('\n4Ô∏è‚É£ Test de la fonction signup_tenant_owner_v6...');
    
    const { data: signupResult, error: signupError } = await supabase
      .rpc('signup_tenant_owner_v6', {
        invitation_token: testToken,
        user_email: testEmail,
        user_full_name: testFullName,
        company_name: 'Test Company SARL',
        user_id: testUserId
      });

    console.log('üìä R√©sultat signup_tenant_owner_v6:', { signupResult, signupError });

    if (signupError) {
      console.error('‚ùå Erreur signup_tenant_owner_v6:', signupError);
      return;
    }

    if (!signupResult || !signupResult.success) {
      console.error('‚ùå √âchec signup_tenant_owner_v6:', signupResult);
      return;
    }

    console.log('‚úÖ Fonction signup_tenant_owner_v6 ex√©cut√©e avec succ√®s');
    console.log('üìã D√©tails:', signupResult);

    // 5. V√©rifier les donn√©es cr√©√©es
    console.log('\n5Ô∏è‚É£ V√©rification des donn√©es cr√©√©es...');

    // V√©rifier le tenant
    const { data: tenant, error: tenantError } = await supabase
      .from('tenants')
      .select('*')
      .eq('id', testTenantId)
      .single();

    if (tenantError || !tenant) {
      console.error('‚ùå Tenant non cr√©√©:', tenantError);
    } else {
      console.log('‚úÖ Tenant cr√©√©:', tenant.name);
    }

    // V√©rifier le profil
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', testUserId)
      .single();

    if (profileError || !profile) {
      console.error('‚ùå Profil non cr√©√©:', profileError);
    } else {
      console.log('‚úÖ Profil cr√©√©:', profile.full_name, '- R√¥le:', profile.role);
    }

    // V√©rifier les r√¥les utilisateur
    const { data: userRoles, error: rolesError } = await supabase
      .from('user_roles')
      .select(`
        *,
        roles:role_id (name)
      `)
      .eq('user_id', testUserId);

    if (rolesError || !userRoles || userRoles.length === 0) {
      console.error('‚ùå R√¥les utilisateur non cr√©√©s:', rolesError);
    } else {
      console.log('‚úÖ R√¥les utilisateur cr√©√©s:', userRoles.map(r => r.roles.name).join(', '));
    }

    // V√©rifier l'employ√©
    const { data: employee, error: employeeError } = await supabase
      .from('employees')
      .select('*')
      .eq('user_id', testUserId)
      .single();

    if (employeeError || !employee) {
      console.error('‚ùå Employ√© non cr√©√©:', employeeError);
    } else {
      console.log('‚úÖ Employ√© cr√©√©:', employee.full_name, '- ID:', employee.employee_id);
    }

    // V√©rifier l'invitation marqu√©e comme accept√©e
    const { data: updatedInvitation, error: inviteCheckError } = await supabase
      .from('invitations')
      .select('*')
      .eq('id', invitation.id)
      .single();

    if (inviteCheckError || !updatedInvitation) {
      console.error('‚ùå Invitation non mise √† jour:', inviteCheckError);
    } else {
      console.log('‚úÖ Invitation marqu√©e comme:', updatedInvitation.status);
    }

    // 6. Nettoyage des donn√©es de test
    console.log('\n6Ô∏è‚É£ Nettoyage des donn√©es de test...');
    
    await supabase.from('employees').delete().eq('user_id', testUserId);
    await supabase.from('user_roles').delete().eq('user_id', testUserId);
    await supabase.from('profiles').delete().eq('user_id', testUserId);
    await supabase.from('tenants').delete().eq('id', testTenantId);
    await supabase.from('invitations').delete().eq('id', invitation.id);
    
    console.log('‚úÖ Donn√©es de test nettoy√©es');

    console.log('\nüéâ Test complet r√©ussi !');
    console.log('=' .repeat(60));
    console.log('‚úÖ Le processus d\'inscription tenant owner fonctionne correctement');
    console.log('‚úÖ Toutes les proc√©dures sont impl√©ment√©es :');
    console.log('   - Validation du token d\'invitation');
    console.log('   - Cr√©ation du tenant');
    console.log('   - Cr√©ation du profil utilisateur');
    console.log('   - Attribution du r√¥le tenant_admin');
    console.log('   - Cr√©ation de l\'enregistrement employ√©');
    console.log('   - Marquage de l\'invitation comme accept√©e');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le test
testTenantOwnerSignupProcess();
